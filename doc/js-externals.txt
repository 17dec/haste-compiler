To interact with the world around us, we need to write some JS to call upon
from our Haskell programs. This document allegedly contains everything you
need to know to write such functions. If it doesn't, please file a bug report.



** The FFI

To import a foreign function, simply declare it with FFI as usual:

  foreign import ccall myFunction :: Int -> IO String

Then write myFunction in JS taking the precautions outlined below. Link against
the file containing your JS function by passing --with-js=myFile.js to hastec.

There is a neat tool for automatically generating FFI bindings at
https://github.com/RudolfVonKrugstein/haste-ffi-parser - check it out.



** Arguments and return values

You don't need to take any special care with arguments or return values; if
your function needs two integers and produces one double, it should take two
arguments and return a single value, just as when writing "normal" Javascript.
It's your responsibility to ensure that you return sane values (don't return
0.42 if your FFI import declaration says you should return an integer), but
Haste takes care of all wrapping and unboxing.



** Complex arguments

You can pass more complex data structures to your JS functions than just Int,
Double and JSString, by wrapping them in a Ptr. To do this, use the toPtr and
fromPtr functions from Haste.Prim rather than the "normal" FFI way.

The FFI will unwrap the argument before passing it to your JS, so if you pass
a value of type Ptr (Double -> IO ()) to your JS function, your function will
see the function itself. You can use this to pass function pointers to JS,
enabling your JS code to call back into Haskell.



** Callbacks

As functions may be curried whichever way, you must use the A() primitive to
call back into your Haskell code from JS; instead of foo(bar, baz), you have to
do A(foo, [bar,baz]).

Also, as you might expect, the world state parameter rears its ugly head when
calling back into Haskell as well. You must always pass one extra parameter to
any Haskell function you call from your JS, so if you have a callback cb of
type IO (), you have to call it as A(cb, [whatever]), NOT just A(cb, [])!

Finally, the FFI doesn't do any nice marshalling for us here, so if you want to
pass a primitive value back into your function, you have to wrap it back up
in a data constructor again. Thus, pass [1, 42] rather than 42, [1, "hi!"]
rather than just "hi!" and so on. Assuming f :: Int -> JSString -> IO (), you
would call f as A(f, [[1,42], [1,"Hi!"], 0]).



** Ptr and Haskell data structures

If you need to do something to a Haskell data structure within a JS function:
don't. It's ugly, and it's going to break if (when) Haste or GHC decides to do
something different WRT data representation.

If you still insist, remember the following:

* A foreign function that takes a value of type Ptr a as an argument or
  returns such a value will unwrap it for you; the value
  toPtr (Just 42) :: Ptr (Maybe Int) will thus look like [2, [1,42]]
  to JS under such circumstances - no extra data constructors anywhere.

* Ptr values that are embedded within something else will NOT be unwrapped in
  this manner.
  Thus, the value toPtr (Just (toPtr 42)) :: Ptr (Maybe (Ptr Int)) will look
  like this: [2, [1, [1, 42]]]
  The outermost Just data constructor (2) is not wrapped, while the [1, 42]
  that denotes 42 :: Int is wrapped in an extra data constructor signifying
  the Ptr part.


** Examples

For reference, here are a few functions to help you get started.

// jsalert :: JSString -> IO ()
function jsalert(text) {
    alert(text);
}

// jsprompt :: IO Int
function jsprompt() {
    var anInt = parseInt(prompt("Please enter an integer!"));
    return anInt;
}

// jspure :: Int -> Int
// Note that this pure function also needs to deal with the world's state.
function jspure(val) {
    return val + 1;
}

// jscallme :: (JSString -> IO ()) -> IO ()
function jscallme(callback) {
    A(callback, [[1,'Hi, Haskell!'], 0]); // Note the A() and wrapped argument
}
