To interact with the world around us, we need to write some JS to call upon
from our Haskell programs. This document allegedly contains everything you
need to know to write such functions.



** The FFI

To import a foreign function, simply declare it with FFI as usual:

  foreign import ccall myFunction :: Int -> IO String

Then write myFunction in JS taking the precautions outlined below.



** Haskell and the Real World

As far as Haskell is concerned, the real world is all about IO, and it treats
all foreign imports as though they were IO functions. IO functions take one
additional argument, representing the state of the world before the function
application, and returns an extra value representing the state of the world
after application.

The actual values are unimportant; in fact, they're never examined and really
ought to be optimized away. For now though, they're in there, and you need to
deal with them.



** Arguments

When writing a function that makes use of n arguments, you need to have n+1
arguments in your function's argument list. This is the state argument
mentioned previously, and it's the last argument your function gets.

Now, you may think that, since JS isn't too picky about how many arguments you
pass to your functions, you can just omit that state argument; unfortunately,
no, you can't. At the moment, the runtime makes use of a function's length
attribute to determine how to deal with it (apply right away or create a
closure,) and if your JS function has a different number of arguments in its
formal argument list than what it actually accepts, the runtime is going to
screw up big time.



** Return values

When returning values, you need to return an unboxed pair, with the state of
the world as its first element and your actual return value as the second.
As the pair is unboxed, meaning that its members don't need to be thunked or
anything funny like that, returning is quite straightforward:

  return [1, state_of_the_world, your_return_value];

You may pass any value for state_of_the_world, and your_return_value can be
a number or a string. The leading 1 is the data constructor tag for an unboxed
tuple.

You need to return this tuple even if you don't want to actually return
anything. In that case, the right thing to do is to pass [1] for
your_return_value.

Finally, you must make sure to cast your return value to the proper type; if
you want to return an integer, you'd better make sure the last element of the
tuple actually is a Number and not a string or array looking like one.



** Callbacks

As you might expect, the world state parameter rears its ugly head when
calling back into Haskell as well. You must always pass one extra parameter to
any Haskell function you call from your JS, so if you have a callback cb of
type IO (), you have to call it as cb(whatever), NOT just cb()!



** Ptr and Haskell data structures

If you need to do something to a Haskell data structure within a JS function:
don't. It's ugly, and it's going to break if (when) Haste or GHC decides to do
something different WRT data representation.

If you still insist, remember the following:

* A foreign function that takes a value of type Ptr a as an argument or
  returns such a value will unwrap it for you; the value
  toPtr (Just 42) :: Ptr (Maybe Int) will thus look like [2, [1,42]]
  to JS under such circumstances - no extra data constructors anywhere.

* Ptr values that are embedded within something else will NOT be unwrapped in
  this manner.
  Thus, the value toPtr (Just (toPtr 42)) :: Ptr (Maybe (Ptr Int)) will look
  like this: [2, [1, [1, 42]]]
  The outermost Just data constructor (2) is not wrapped, while the [1, 42]
  that denotes 42 :: Int is wrapped in an extra data constructor signifying
  the Ptr part.


** Examples

For reference, here are a few functions to help you get started.

// jsalert :: JSString -> IO ()
function jsalert(text, _state_of_the_world) {
    alert(text);
    return [1, 0]; // 0 is perfectly valid as the state of the world
}

// jsprompt :: IO Int
function jsprompt(_state_of_the_world) {
    var anInt = parseInt(prompt("Please enter an integer!"));
    return [1, 0, anInt];
}

// jspure :: Int -> Int
// Note that this pure function also needs to deal with the world's state.
function jspure(val, _state_of_the_world) {
    return [1, 0, val + 1];
}

// jscallme :: (JSString -> IO ()) -> IO ()
function jsalert(callback, _state_of_the_world) {
    callback('Hi, Haskell!', 0);
    return [1, "it's this present state of grace i offer thee"];
}
